# # This is a sample workflow to help working with API specs based on API Insights, main steps:
# # 1. add secrets for your github actions, e.g. API_INSIGHTS_OAUTH2_CLIENT_SECRET in {your_github_repo}/settings/secrets/actions
# # 2. add below workflow in your github repo.

# name: API Insights

# on:
#   push:
#     branches:
#       - "*"
#     tags: [v*.*-*]

# env:
#   API_SPEC: oas/incremental_dashboard-1.26.0-rev4.yaml # e.g. openapi/spec2.json
#   API_INSIGHTS_SERVICE: YOUR_SERVICE_NAME_ID # Create service using UI and update ID
#   API_INSIGHTS_CLI_NAME: api-insights-cli
#   API_INSIGHTS_HOST: https://devnet-testing.cisco.com
#   API_INSIGHTS_BASE_PATH: /v1/apiregistry-cisco
#   API_INSIGHTS_AUTH_TYPE: oauth2
#   API_INSIGHTS_OAUTH2_GRANT_TYPE: client_credentials
#   API_INSIGHTS_OAUTH2_TOKEN_URL: https://auth-devnet-stg.cisco.com/v1/auth/oauth/token
#   API_INSIGHTS_OAUTH2_CLIENT_ID: api-insights-playground-admin-service
#   API_INSIGHTS_OAUTH2_CLIENT_SECRET: ${{ secrets.API_INSIGHTS_OAUTH2_CLIENT_SECRET }} # Get client secret from API Insights support
#   RELEASE_REVISON: 10

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # analyze API specs
#   # by default, it fails if there is any findings in error severity.
#   # additionally, `--fail-below-score int` could be used to fail this step with specified minimal target score.
#   contract:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: API Insights - Set Permissions on CLI
#         run: chmod +x ./api-insights-cli
#       - name: API Insights - Analyze API Spec
#         run: |
#           ./api-insights-cli analyze ${{ env.API_SPEC }} --analyzer="contract"
#   guidelines:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: API Insights - Set Permissions on CLI
#         run: chmod +x ./api-insights-cli
#       - name: API Insights - Analyze API Spec
#         run: |
#           ./api-insights-cli analyze ${{ env.API_SPEC }} --analyzer="guidelines"
#   inclusive-language:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: API Insights - Set Permissions on CLI
#         run: chmod +x ./api-insights-cli
#       - name: API Insights - Analyze API Spec
#         run: |
#           ./api-insights-cli analyze ${{ env.API_SPEC }} --analyzer="inclusive-language"
#   documentation:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: API Insights - Set Permissions on CLI
#         run: chmod +x ./api-insights-cli
#       - name: API Insights - Analyze API Spec
#         run: |
#           ./api-insights-cli analyze ${{ env.API_SPEC }} --analyzer="documentation"
#   # diff:
#     # Diff local spec file with last uploaded spec on service. 
#     # Based on requirement change --latest to other version &amp; revisions. 
#     # Note one spec should exist. 
#     # runs-on: ubuntu-latest
#     # steps:
#     #   - uses: actions/checkout@v3
#     #   - name: API Insights - Set Permissions on CLI
#     #     run: chmod +x ./api-insights-cli
#     #   - name: API Insights - Diff API SPec
#     #     run: |
#     #       ./api-insights-cli diff ${{ env.API_SPEC }} -s ${{ env.API_INSIGHTS_SERVICE }} --latest --fail-on-incompatible
#   # upload:
#   #   # Use `needs` to define prerequisite jobs, e.g. only upload when step `analyze` and `diff` is successful.
#   #   # needs: [ analyze, diff]
#   #   runs-on: ubuntu-latest
#   #   if: startsWith(github.ref, 'refs/tags/v')
#   #   steps:
#   #     - uses: actions/checkout@v3
#   #     - name: API Insights - Set Permissions on CLI
#   #       run: chmod +x ./api-insights-cli
#   #     - name: Set tag env
#   #       run: echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" &gt;&gt; $GITHUB_ENV
#   #     - id: parse-tags
#   #       name: Parse tags
#   #       uses: actions/github-script@v6
#   #       with:
#   #         script: |
#   #           const items = "${{ env.RELEASE_TAG }}".split('-')
#   #           console.log(items)
#   #           core.setOutput('version', items[0])
#   #           core.setOutput('revision', items[1])
#   #     - name: Set version env
#   #       run: echo "RELEASE_VERSION=${{steps.parse-tags.outputs.version}}" &gt;&gt; $GITHUB_ENV
#   #     - name: Set revision env
#   #       run: echo "RELEASE_REVISON=${{steps.parse-tags.outputs.revision}}" &gt;&gt; $GITHUB_ENV
#   #     - name: API Insights - Upload API SPec
#   #       run: |
#   #         api-insights-cli service uploadspec ${{ env.API_SPEC }} -s ${{ env.API_INSIGHTS_SERVICE }} --revision ${{ env.RELEASE_REVISON }}
